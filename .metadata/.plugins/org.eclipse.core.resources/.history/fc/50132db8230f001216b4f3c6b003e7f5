package vis.clustering.quad;

import java.io.File;
import java.util.ArrayList;

import vis.db.VisualFeatures;
import vis.lucene.IndexFactory;
import vis.lucene.SearchCallback;
import vis.lucene.SearchResult;
import vis.lucene.Searcher;
import vis.view.quads.QuadInspector;

public class QuadTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Searcher s = new Searcher(new File(IndexFactory.getImageIndexPath(0)));
		final ArrayList<SearchResult> results= new ArrayList<SearchResult>();
		
		final VisualFeatures f = new VisualFeatures();
		
		
		s.search("woman", 1000, new SearchCallback() {
			
			@Override
			public boolean onResult(SearchResult searchResult) {
				int fid = Integer.parseInt(searchResult.getFotoliaId());
				if(f.getFeature(fid) != null){
					results.add(searchResult);
				}
				return true;
			}
		});
		
	
		
		f.shutdown();
			
		
		
		int numi = results.size() - (results.size() % Quadrator.CLUSTER);
		
		
		// read ids from results
		int[] ids = new int[numi];
		int o = 0;
		for(SearchResult sr : results){
			
			ids[o++] = Integer.parseInt(sr.getFotoliaId());
			if(o>numi-1){
				break;
			}
		}
		
		
		// 
		Quadrator q = new Quadrator(s);
		QuadInspector qi = new QuadInspector(q);
		q.match(ids);
		
		
		
		
		
		Dumper.dumpRow(q, s);
		
		
		s.close();	
	}

}
