package image;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream.GetField;
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

public class ImageLoader {
	private final BlockingQueue<Runnable> urlQueue = new LinkedBlockingQueue<Runnable>(new LinkedList<Runnable>());
	private ThreadPoolExecutor urlPool;
	
	private final BlockingQueue<Runnable> fileQueue = new LinkedBlockingQueue<Runnable>(new LinkedList<Runnable>());
	private ThreadPoolExecutor filePool;
	
	private HashMap<String,CacheObject> cache = new HashMap<String,CacheObject>();
	private Logger log = Logger.getLogger(this.getClass());
	
	
 
    

	public ImageLoader(){
		int corePoolSize = 2;
		int maxPoolSize = 8;
		int keepAliveTime = 10; // very long
		
		urlPool = new ThreadPoolExecutor(corePoolSize, maxPoolSize,
                keepAliveTime, TimeUnit.HOURS, urlQueue);		
		
		filePool = new ThreadPoolExecutor(corePoolSize, maxPoolSize,
                keepAliveTime, TimeUnit.HOURS, fileQueue);
	}
	
	public void clearCache(){
		cache.clear();
	}
	
	public BufferedImage getImageForUrl(String url){
		CacheObject cached = cache.get(url);
		if(cached != null)return cached.bi;
				
		// get from disk
		File diskFile = new File(getImagePathForUrl(url));
		if(diskFile.exists()){
			try {
				BufferedImage bi = ImageIO.read(diskFile);
				if(bi != null){
					cache.put(url, new CacheObject(bi));
					return bi;
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
		}
			
		
		return null;
	}
	
	public void preload(String url){
		if(cache.containsKey(url)){
			return;
		}
		
		File diskFile = new File(getImagePathForUrl(url));
		if(diskFile.exists()){
			filePool.execute(new LoadFromFileTask(url, diskFile));
		}
		
		if(!has(url)){			
			urlPool.execute(new LoadFromUrlTask(url));
		}
	}
	
	public boolean has(String url){
		File cacheFile = new File(getImagePathForUrl(url));
		return (cache.containsKey(url) || cacheFile.exists());
	}
	
	public int remaining(){
		return urlQueue.size();
	}
	
	public String getImagePathForUrl(String url){
		return "../../" + url.substring(20);
	}
	
	private void _loadFromFile(File file, String url){
		if(cache.containsKey(url) == true){			
			return;
		}
		
		BufferedImage bi;
		try {
			bi = ImageIO.read(file);
			if(bi != null){
				cache.put(url, new CacheObject(bi));
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private void _loadFromUrl(String url){
		if(cache.containsKey(url) == true){			
			return;
		}
		
		BufferedImage bi;
		try {
			log.debug("Preloading ... " + url);
			
			
			
			
			// read from url
			bi = ImageIO.read(new URL(url));
			if(bi != null){
				// store on disk
				
				File tmpFile = File.createTempFile("preload", "");
				
				File parent = diskFile.getParentFile();
				if(parent.exists() == false){
					if(!parent.mkdirs()){
						log.error("Could not create dir: " + parent);
					}
				}
				
				ImageIO.write(bi, "jpg", tmpFile);
				try{
				
					FileUtils.moveFile(tmpFile, diskFile);
				}catch(Exception e){
					log.error(e.getMessage());
				}finally{
					if(tmpFile.exists()){
						tmpFile.delete();
					}
				}
				
				// store in cache
				cache.put(url, new CacheObject(bi));
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
	}
	
	private class LoadFromUrlTask implements Runnable{
		private String url;
		public LoadFromUrlTask(String url){
			this.url = url;
		}

		@Override
		public void run() {
			_loadFromUrl(url);				
		}
		
	}
	
	private class LoadFromFileTask implements Runnable{
		private String url;
		private File file;
		
		public LoadFromFileTask(File file, String url){
			this.url = url;
			this.file = file;
		}

		@Override
		public void run() {
			_loadFromFile(url, file);				
		}
		
	}
	
	private class CacheObject {
		public BufferedImage bi;
		
		public CacheObject(BufferedImage image){
			this.bi = image;
		}
	}

	public void waitFor() {
		while(urlQueue.size() > 0){
			log.debug(urlQueue.size() + " images remaing...");
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}
